/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.data.migration.tool.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.data.migration.tool.model.EntityMigration;
import com.liferay.data.migration.tool.model.EntityMigrationModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the EntityMigration service. Represents a row in the &quot;MIG_EntityMigration&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link EntityMigrationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EntityMigrationImpl}.
 * </p>
 *
 * @author Dylan Rebelak
 * @see EntityMigrationImpl
 * @see EntityMigration
 * @see EntityMigrationModel
 * @generated
 */
@ProviderType
public class EntityMigrationModelImpl extends BaseModelImpl<EntityMigration>
	implements EntityMigrationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a entity migration model instance should use the {@link EntityMigration} interface instead.
	 */
	public static final String TABLE_NAME = "MIG_EntityMigration";
	public static final Object[][] TABLE_COLUMNS = {
			{ "entityMigrationId", Types.BIGINT },
			{ "migrationId", Types.BIGINT },
			{ "entityName", Types.VARCHAR },
			{ "start_", Types.TIMESTAMP },
			{ "end_", Types.TIMESTAMP },
			{ "count", Types.BIGINT },
			{ "lastCompletion", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("entityMigrationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("migrationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("entityName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("start_", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("end_", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("count", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("lastCompletion", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table MIG_EntityMigration (entityMigrationId LONG not null primary key,migrationId LONG,entityName VARCHAR(75) null,start_ DATE null,end_ DATE null,count LONG,lastCompletion DATE null)";
	public static final String TABLE_SQL_DROP = "drop table MIG_EntityMigration";
	public static final String ORDER_BY_JPQL = " ORDER BY entityMigration.entityMigrationId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY MIG_EntityMigration.entityMigrationId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.data.migration.tool.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.data.migration.tool.model.EntityMigration"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.data.migration.tool.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.data.migration.tool.model.EntityMigration"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.data.migration.tool.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.data.migration.tool.model.EntityMigration"),
			true);
	public static final long ENTITYNAME_COLUMN_BITMASK = 1L;
	public static final long MIGRATIONID_COLUMN_BITMASK = 2L;
	public static final long ENTITYMIGRATIONID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.data.migration.tool.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.data.migration.tool.model.EntityMigration"));

	public EntityMigrationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _entityMigrationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEntityMigrationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _entityMigrationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EntityMigration.class;
	}

	@Override
	public String getModelClassName() {
		return EntityMigration.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("entityMigrationId", getEntityMigrationId());
		attributes.put("migrationId", getMigrationId());
		attributes.put("entityName", getEntityName());
		attributes.put("start", getStart());
		attributes.put("end", getEnd());
		attributes.put("count", getCount());
		attributes.put("lastCompletion", getLastCompletion());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long entityMigrationId = (Long)attributes.get("entityMigrationId");

		if (entityMigrationId != null) {
			setEntityMigrationId(entityMigrationId);
		}

		Long migrationId = (Long)attributes.get("migrationId");

		if (migrationId != null) {
			setMigrationId(migrationId);
		}

		String entityName = (String)attributes.get("entityName");

		if (entityName != null) {
			setEntityName(entityName);
		}

		Date start = (Date)attributes.get("start");

		if (start != null) {
			setStart(start);
		}

		Date end = (Date)attributes.get("end");

		if (end != null) {
			setEnd(end);
		}

		Long count = (Long)attributes.get("count");

		if (count != null) {
			setCount(count);
		}

		Date lastCompletion = (Date)attributes.get("lastCompletion");

		if (lastCompletion != null) {
			setLastCompletion(lastCompletion);
		}
	}

	@Override
	public long getEntityMigrationId() {
		return _entityMigrationId;
	}

	@Override
	public void setEntityMigrationId(long entityMigrationId) {
		_entityMigrationId = entityMigrationId;
	}

	@Override
	public long getMigrationId() {
		return _migrationId;
	}

	@Override
	public void setMigrationId(long migrationId) {
		_columnBitmask |= MIGRATIONID_COLUMN_BITMASK;

		if (!_setOriginalMigrationId) {
			_setOriginalMigrationId = true;

			_originalMigrationId = _migrationId;
		}

		_migrationId = migrationId;
	}

	public long getOriginalMigrationId() {
		return _originalMigrationId;
	}

	@Override
	public String getEntityName() {
		if (_entityName == null) {
			return StringPool.BLANK;
		}
		else {
			return _entityName;
		}
	}

	@Override
	public void setEntityName(String entityName) {
		_columnBitmask |= ENTITYNAME_COLUMN_BITMASK;

		if (_originalEntityName == null) {
			_originalEntityName = _entityName;
		}

		_entityName = entityName;
	}

	public String getOriginalEntityName() {
		return GetterUtil.getString(_originalEntityName);
	}

	@Override
	public Date getStart() {
		return _start;
	}

	@Override
	public void setStart(Date start) {
		_start = start;
	}

	@Override
	public Date getEnd() {
		return _end;
	}

	@Override
	public void setEnd(Date end) {
		_end = end;
	}

	@Override
	public long getCount() {
		return _count;
	}

	@Override
	public void setCount(long count) {
		_count = count;
	}

	@Override
	public Date getLastCompletion() {
		return _lastCompletion;
	}

	@Override
	public void setLastCompletion(Date lastCompletion) {
		_lastCompletion = lastCompletion;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			EntityMigration.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EntityMigration toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (EntityMigration)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EntityMigrationImpl entityMigrationImpl = new EntityMigrationImpl();

		entityMigrationImpl.setEntityMigrationId(getEntityMigrationId());
		entityMigrationImpl.setMigrationId(getMigrationId());
		entityMigrationImpl.setEntityName(getEntityName());
		entityMigrationImpl.setStart(getStart());
		entityMigrationImpl.setEnd(getEnd());
		entityMigrationImpl.setCount(getCount());
		entityMigrationImpl.setLastCompletion(getLastCompletion());

		entityMigrationImpl.resetOriginalValues();

		return entityMigrationImpl;
	}

	@Override
	public int compareTo(EntityMigration entityMigration) {
		long primaryKey = entityMigration.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof EntityMigration)) {
			return false;
		}

		EntityMigration entityMigration = (EntityMigration)obj;

		long primaryKey = entityMigration.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		EntityMigrationModelImpl entityMigrationModelImpl = this;

		entityMigrationModelImpl._originalMigrationId = entityMigrationModelImpl._migrationId;

		entityMigrationModelImpl._setOriginalMigrationId = false;

		entityMigrationModelImpl._originalEntityName = entityMigrationModelImpl._entityName;

		entityMigrationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<EntityMigration> toCacheModel() {
		EntityMigrationCacheModel entityMigrationCacheModel = new EntityMigrationCacheModel();

		entityMigrationCacheModel.entityMigrationId = getEntityMigrationId();

		entityMigrationCacheModel.migrationId = getMigrationId();

		entityMigrationCacheModel.entityName = getEntityName();

		String entityName = entityMigrationCacheModel.entityName;

		if ((entityName != null) && (entityName.length() == 0)) {
			entityMigrationCacheModel.entityName = null;
		}

		Date start = getStart();

		if (start != null) {
			entityMigrationCacheModel.start = start.getTime();
		}
		else {
			entityMigrationCacheModel.start = Long.MIN_VALUE;
		}

		Date end = getEnd();

		if (end != null) {
			entityMigrationCacheModel.end = end.getTime();
		}
		else {
			entityMigrationCacheModel.end = Long.MIN_VALUE;
		}

		entityMigrationCacheModel.count = getCount();

		Date lastCompletion = getLastCompletion();

		if (lastCompletion != null) {
			entityMigrationCacheModel.lastCompletion = lastCompletion.getTime();
		}
		else {
			entityMigrationCacheModel.lastCompletion = Long.MIN_VALUE;
		}

		return entityMigrationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{entityMigrationId=");
		sb.append(getEntityMigrationId());
		sb.append(", migrationId=");
		sb.append(getMigrationId());
		sb.append(", entityName=");
		sb.append(getEntityName());
		sb.append(", start=");
		sb.append(getStart());
		sb.append(", end=");
		sb.append(getEnd());
		sb.append(", count=");
		sb.append(getCount());
		sb.append(", lastCompletion=");
		sb.append(getLastCompletion());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.liferay.data.migration.tool.model.EntityMigration");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>entityMigrationId</column-name><column-value><![CDATA[");
		sb.append(getEntityMigrationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>migrationId</column-name><column-value><![CDATA[");
		sb.append(getMigrationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>entityName</column-name><column-value><![CDATA[");
		sb.append(getEntityName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>start</column-name><column-value><![CDATA[");
		sb.append(getStart());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>end</column-name><column-value><![CDATA[");
		sb.append(getEnd());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>count</column-name><column-value><![CDATA[");
		sb.append(getCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastCompletion</column-name><column-value><![CDATA[");
		sb.append(getLastCompletion());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = EntityMigration.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			EntityMigration.class
		};
	private long _entityMigrationId;
	private long _migrationId;
	private long _originalMigrationId;
	private boolean _setOriginalMigrationId;
	private String _entityName;
	private String _originalEntityName;
	private Date _start;
	private Date _end;
	private long _count;
	private Date _lastCompletion;
	private long _columnBitmask;
	private EntityMigration _escapedModel;
}