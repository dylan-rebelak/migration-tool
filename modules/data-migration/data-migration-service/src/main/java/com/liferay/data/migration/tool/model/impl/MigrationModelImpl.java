/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.data.migration.tool.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.data.migration.tool.model.Migration;
import com.liferay.data.migration.tool.model.MigrationModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Migration service. Represents a row in the &quot;SYNC_Migration&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link MigrationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MigrationImpl}.
 * </p>
 *
 * @author Dylan Rebelak
 * @see MigrationImpl
 * @see Migration
 * @see MigrationModel
 * @generated
 */
@ProviderType
public class MigrationModelImpl extends BaseModelImpl<Migration>
	implements MigrationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a migration model instance should use the {@link Migration} interface instead.
	 */
	public static final String TABLE_NAME = "SYNC_Migration";
	public static final Object[][] TABLE_COLUMNS = {
			{ "migrationId", Types.BIGINT },
			{ "timeStarted", Types.TIMESTAMP },
			{ "timeCompleted", Types.TIMESTAMP },
			{ "fromDate", Types.TIMESTAMP },
			{ "recordsSynced", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("migrationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("timeStarted", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("timeCompleted", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("fromDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("recordsSynced", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table SYNC_Migration (migrationId LONG not null primary key,timeStarted DATE null,timeCompleted DATE null,fromDate DATE null,recordsSynced LONG)";
	public static final String TABLE_SQL_DROP = "drop table SYNC_Migration";
	public static final String ORDER_BY_JPQL = " ORDER BY migration.timeStarted DESC";
	public static final String ORDER_BY_SQL = " ORDER BY SYNC_Migration.timeStarted DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.data.migration.tool.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.data.migration.tool.model.Migration"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.data.migration.tool.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.data.migration.tool.model.Migration"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.data.migration.tool.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.data.migration.tool.model.Migration"));

	public MigrationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _migrationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMigrationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _migrationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Migration.class;
	}

	@Override
	public String getModelClassName() {
		return Migration.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("migrationId", getMigrationId());
		attributes.put("timeStarted", getTimeStarted());
		attributes.put("timeCompleted", getTimeCompleted());
		attributes.put("fromDate", getFromDate());
		attributes.put("recordsSynced", getRecordsSynced());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long migrationId = (Long)attributes.get("migrationId");

		if (migrationId != null) {
			setMigrationId(migrationId);
		}

		Date timeStarted = (Date)attributes.get("timeStarted");

		if (timeStarted != null) {
			setTimeStarted(timeStarted);
		}

		Date timeCompleted = (Date)attributes.get("timeCompleted");

		if (timeCompleted != null) {
			setTimeCompleted(timeCompleted);
		}

		Date fromDate = (Date)attributes.get("fromDate");

		if (fromDate != null) {
			setFromDate(fromDate);
		}

		Long recordsSynced = (Long)attributes.get("recordsSynced");

		if (recordsSynced != null) {
			setRecordsSynced(recordsSynced);
		}
	}

	@Override
	public long getMigrationId() {
		return _migrationId;
	}

	@Override
	public void setMigrationId(long migrationId) {
		_migrationId = migrationId;
	}

	@Override
	public Date getTimeStarted() {
		return _timeStarted;
	}

	@Override
	public void setTimeStarted(Date timeStarted) {
		_timeStarted = timeStarted;
	}

	@Override
	public Date getTimeCompleted() {
		return _timeCompleted;
	}

	@Override
	public void setTimeCompleted(Date timeCompleted) {
		_timeCompleted = timeCompleted;
	}

	@Override
	public Date getFromDate() {
		return _fromDate;
	}

	@Override
	public void setFromDate(Date fromDate) {
		_fromDate = fromDate;
	}

	@Override
	public long getRecordsSynced() {
		return _recordsSynced;
	}

	@Override
	public void setRecordsSynced(long recordsSynced) {
		_recordsSynced = recordsSynced;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Migration.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Migration toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Migration)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MigrationImpl migrationImpl = new MigrationImpl();

		migrationImpl.setMigrationId(getMigrationId());
		migrationImpl.setTimeStarted(getTimeStarted());
		migrationImpl.setTimeCompleted(getTimeCompleted());
		migrationImpl.setFromDate(getFromDate());
		migrationImpl.setRecordsSynced(getRecordsSynced());

		migrationImpl.resetOriginalValues();

		return migrationImpl;
	}

	@Override
	public int compareTo(Migration migration) {
		int value = 0;

		value = DateUtil.compareTo(getTimeStarted(), migration.getTimeStarted());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Migration)) {
			return false;
		}

		Migration migration = (Migration)obj;

		long primaryKey = migration.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Migration> toCacheModel() {
		MigrationCacheModel migrationCacheModel = new MigrationCacheModel();

		migrationCacheModel.migrationId = getMigrationId();

		Date timeStarted = getTimeStarted();

		if (timeStarted != null) {
			migrationCacheModel.timeStarted = timeStarted.getTime();
		}
		else {
			migrationCacheModel.timeStarted = Long.MIN_VALUE;
		}

		Date timeCompleted = getTimeCompleted();

		if (timeCompleted != null) {
			migrationCacheModel.timeCompleted = timeCompleted.getTime();
		}
		else {
			migrationCacheModel.timeCompleted = Long.MIN_VALUE;
		}

		Date fromDate = getFromDate();

		if (fromDate != null) {
			migrationCacheModel.fromDate = fromDate.getTime();
		}
		else {
			migrationCacheModel.fromDate = Long.MIN_VALUE;
		}

		migrationCacheModel.recordsSynced = getRecordsSynced();

		return migrationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{migrationId=");
		sb.append(getMigrationId());
		sb.append(", timeStarted=");
		sb.append(getTimeStarted());
		sb.append(", timeCompleted=");
		sb.append(getTimeCompleted());
		sb.append(", fromDate=");
		sb.append(getFromDate());
		sb.append(", recordsSynced=");
		sb.append(getRecordsSynced());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.liferay.data.migration.tool.model.Migration");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>migrationId</column-name><column-value><![CDATA[");
		sb.append(getMigrationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>timeStarted</column-name><column-value><![CDATA[");
		sb.append(getTimeStarted());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>timeCompleted</column-name><column-value><![CDATA[");
		sb.append(getTimeCompleted());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fromDate</column-name><column-value><![CDATA[");
		sb.append(getFromDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>recordsSynced</column-name><column-value><![CDATA[");
		sb.append(getRecordsSynced());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Migration.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Migration.class
		};
	private long _migrationId;
	private Date _timeStarted;
	private Date _timeCompleted;
	private Date _fromDate;
	private long _recordsSynced;
	private Migration _escapedModel;
}