/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.data.migration.tool.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.data.migration.tool.model.EntityManager;
import com.liferay.data.migration.tool.service.EntityManagerLocalService;
import com.liferay.data.migration.tool.service.persistence.EntityManagerPersistence;
import com.liferay.data.migration.tool.service.persistence.MigrationPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the entity manager local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.liferay.data.migration.tool.service.impl.EntityManagerLocalServiceImpl}.
 * </p>
 *
 * @author Dylan Rebelak
 * @see com.liferay.data.migration.tool.service.impl.EntityManagerLocalServiceImpl
 * @see com.liferay.data.migration.tool.service.EntityManagerLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class EntityManagerLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements EntityManagerLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.liferay.data.migration.tool.service.EntityManagerLocalServiceUtil} to access the entity manager local service.
	 */

	/**
	 * Adds the entity manager to the database. Also notifies the appropriate model listeners.
	 *
	 * @param entityManager the entity manager
	 * @return the entity manager that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public EntityManager addEntityManager(EntityManager entityManager) {
		entityManager.setNew(true);

		return entityManagerPersistence.update(entityManager);
	}

	/**
	 * Creates a new entity manager with the primary key. Does not add the entity manager to the database.
	 *
	 * @param entityName the primary key for the new entity manager
	 * @return the new entity manager
	 */
	@Override
	public EntityManager createEntityManager(String entityName) {
		return entityManagerPersistence.create(entityName);
	}

	/**
	 * Deletes the entity manager with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param entityName the primary key of the entity manager
	 * @return the entity manager that was removed
	 * @throws PortalException if a entity manager with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public EntityManager deleteEntityManager(String entityName)
		throws PortalException {
		return entityManagerPersistence.remove(entityName);
	}

	/**
	 * Deletes the entity manager from the database. Also notifies the appropriate model listeners.
	 *
	 * @param entityManager the entity manager
	 * @return the entity manager that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public EntityManager deleteEntityManager(EntityManager entityManager) {
		return entityManagerPersistence.remove(entityManager);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(EntityManager.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return entityManagerPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.data.migration.tool.model.impl.EntityManagerModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return entityManagerPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.data.migration.tool.model.impl.EntityManagerModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return entityManagerPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return entityManagerPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return entityManagerPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public EntityManager fetchEntityManager(String entityName) {
		return entityManagerPersistence.fetchByPrimaryKey(entityName);
	}

	/**
	 * Returns the entity manager with the primary key.
	 *
	 * @param entityName the primary key of the entity manager
	 * @return the entity manager
	 * @throws PortalException if a entity manager with the primary key could not be found
	 */
	@Override
	public EntityManager getEntityManager(String entityName)
		throws PortalException {
		return entityManagerPersistence.findByPrimaryKey(entityName);
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return entityManagerLocalService.deleteEntityManager((EntityManager)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return entityManagerPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the entity managers.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.data.migration.tool.model.impl.EntityManagerModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of entity managers
	 * @param end the upper bound of the range of entity managers (not inclusive)
	 * @return the range of entity managers
	 */
	@Override
	public List<EntityManager> getEntityManagers(int start, int end) {
		return entityManagerPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of entity managers.
	 *
	 * @return the number of entity managers
	 */
	@Override
	public int getEntityManagersCount() {
		return entityManagerPersistence.countAll();
	}

	/**
	 * Updates the entity manager in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param entityManager the entity manager
	 * @return the entity manager that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public EntityManager updateEntityManager(EntityManager entityManager) {
		return entityManagerPersistence.update(entityManager);
	}

	/**
	 * Returns the entity manager local service.
	 *
	 * @return the entity manager local service
	 */
	public EntityManagerLocalService getEntityManagerLocalService() {
		return entityManagerLocalService;
	}

	/**
	 * Sets the entity manager local service.
	 *
	 * @param entityManagerLocalService the entity manager local service
	 */
	public void setEntityManagerLocalService(
		EntityManagerLocalService entityManagerLocalService) {
		this.entityManagerLocalService = entityManagerLocalService;
	}

	/**
	 * Returns the entity manager persistence.
	 *
	 * @return the entity manager persistence
	 */
	public EntityManagerPersistence getEntityManagerPersistence() {
		return entityManagerPersistence;
	}

	/**
	 * Sets the entity manager persistence.
	 *
	 * @param entityManagerPersistence the entity manager persistence
	 */
	public void setEntityManagerPersistence(
		EntityManagerPersistence entityManagerPersistence) {
		this.entityManagerPersistence = entityManagerPersistence;
	}

	/**
	 * Returns the migration local service.
	 *
	 * @return the migration local service
	 */
	public com.liferay.data.migration.tool.service.MigrationLocalService getMigrationLocalService() {
		return migrationLocalService;
	}

	/**
	 * Sets the migration local service.
	 *
	 * @param migrationLocalService the migration local service
	 */
	public void setMigrationLocalService(
		com.liferay.data.migration.tool.service.MigrationLocalService migrationLocalService) {
		this.migrationLocalService = migrationLocalService;
	}

	/**
	 * Returns the migration persistence.
	 *
	 * @return the migration persistence
	 */
	public MigrationPersistence getMigrationPersistence() {
		return migrationPersistence;
	}

	/**
	 * Sets the migration persistence.
	 *
	 * @param migrationPersistence the migration persistence
	 */
	public void setMigrationPersistence(
		MigrationPersistence migrationPersistence) {
		this.migrationPersistence = migrationPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("com.liferay.data.migration.tool.model.EntityManager",
			entityManagerLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"com.liferay.data.migration.tool.model.EntityManager");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return EntityManagerLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return EntityManager.class;
	}

	protected String getModelClassName() {
		return EntityManager.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = entityManagerPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = EntityManagerLocalService.class)
	protected EntityManagerLocalService entityManagerLocalService;
	@BeanReference(type = EntityManagerPersistence.class)
	protected EntityManagerPersistence entityManagerPersistence;
	@BeanReference(type = com.liferay.data.migration.tool.service.MigrationLocalService.class)
	protected com.liferay.data.migration.tool.service.MigrationLocalService migrationLocalService;
	@BeanReference(type = MigrationPersistence.class)
	protected MigrationPersistence migrationPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}