/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.data.migration.tool.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.data.migration.tool.model.EntityManager;
import com.liferay.data.migration.tool.model.EntityManagerModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the EntityManager service. Represents a row in the &quot;SYNC_EntityManager&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link EntityManagerModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EntityManagerImpl}.
 * </p>
 *
 * @author Dylan Rebelak
 * @see EntityManagerImpl
 * @see EntityManager
 * @see EntityManagerModel
 * @generated
 */
@ProviderType
public class EntityManagerModelImpl extends BaseModelImpl<EntityManager>
	implements EntityManagerModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a entity manager model instance should use the {@link EntityManager} interface instead.
	 */
	public static final String TABLE_NAME = "SYNC_EntityManager";
	public static final Object[][] TABLE_COLUMNS = {
			{ "entityName", Types.VARCHAR },
			{ "lastSyncDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("entityName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lastSyncDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table SYNC_EntityManager (entityName VARCHAR(75) not null primary key,lastSyncDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table SYNC_EntityManager";
	public static final String ORDER_BY_JPQL = " ORDER BY entityManager.entityName ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SYNC_EntityManager.entityName ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.data.migration.tool.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.data.migration.tool.model.EntityManager"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.data.migration.tool.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.data.migration.tool.model.EntityManager"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.data.migration.tool.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.data.migration.tool.model.EntityManager"));

	public EntityManagerModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _entityName;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setEntityName(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _entityName;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return EntityManager.class;
	}

	@Override
	public String getModelClassName() {
		return EntityManager.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("entityName", getEntityName());
		attributes.put("lastSyncDate", getLastSyncDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String entityName = (String)attributes.get("entityName");

		if (entityName != null) {
			setEntityName(entityName);
		}

		Date lastSyncDate = (Date)attributes.get("lastSyncDate");

		if (lastSyncDate != null) {
			setLastSyncDate(lastSyncDate);
		}
	}

	@Override
	public String getEntityName() {
		if (_entityName == null) {
			return StringPool.BLANK;
		}
		else {
			return _entityName;
		}
	}

	@Override
	public void setEntityName(String entityName) {
		_entityName = entityName;
	}

	@Override
	public Date getLastSyncDate() {
		return _lastSyncDate;
	}

	@Override
	public void setLastSyncDate(Date lastSyncDate) {
		_lastSyncDate = lastSyncDate;
	}

	@Override
	public EntityManager toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (EntityManager)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EntityManagerImpl entityManagerImpl = new EntityManagerImpl();

		entityManagerImpl.setEntityName(getEntityName());
		entityManagerImpl.setLastSyncDate(getLastSyncDate());

		entityManagerImpl.resetOriginalValues();

		return entityManagerImpl;
	}

	@Override
	public int compareTo(EntityManager entityManager) {
		String primaryKey = entityManager.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof EntityManager)) {
			return false;
		}

		EntityManager entityManager = (EntityManager)obj;

		String primaryKey = entityManager.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<EntityManager> toCacheModel() {
		EntityManagerCacheModel entityManagerCacheModel = new EntityManagerCacheModel();

		entityManagerCacheModel.entityName = getEntityName();

		String entityName = entityManagerCacheModel.entityName;

		if ((entityName != null) && (entityName.length() == 0)) {
			entityManagerCacheModel.entityName = null;
		}

		Date lastSyncDate = getLastSyncDate();

		if (lastSyncDate != null) {
			entityManagerCacheModel.lastSyncDate = lastSyncDate.getTime();
		}
		else {
			entityManagerCacheModel.lastSyncDate = Long.MIN_VALUE;
		}

		return entityManagerCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{entityName=");
		sb.append(getEntityName());
		sb.append(", lastSyncDate=");
		sb.append(getLastSyncDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("com.liferay.data.migration.tool.model.EntityManager");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>entityName</column-name><column-value><![CDATA[");
		sb.append(getEntityName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastSyncDate</column-name><column-value><![CDATA[");
		sb.append(getLastSyncDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = EntityManager.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			EntityManager.class
		};
	private String _entityName;
	private Date _lastSyncDate;
	private EntityManager _escapedModel;
}